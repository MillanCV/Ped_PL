
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 09 08:26:06 CET 2018
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 09 08:26:06 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\056\002\000\002\002" +
    "\004\000\002\003\006\000\002\004\005\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\007\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\006\000\002\011\006\000\002\044" +
    "\003\000\002\044\003\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\015\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\004\000\002\017\004\000\002\017\003\000\002\020" +
    "\006\000\002\022\005\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\023\003\000" +
    "\002\023\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\025\006\000\002\026" +
    "\010\000\002\027\007\000\002\027\005\000\002\027\003" +
    "\000\002\030\007\000\002\033\005\000\002\031\012\000" +
    "\002\032\003\000\002\032\003\000\002\034\003\000\002" +
    "\034\004\000\002\040\004\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\035\007\000\002\035\007" +
    "\000\002\036\006\000\002\037\005\000\002\037\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\045\006\000\002\045\006\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\003\000\002\053\004\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\003\000\002\053\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\003\000\002\051\003\000" +
    "\002\055\006\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\023\000\001\002\000\004\002\311\001" +
    "\002\000\004\023\010\001\002\000\004\002\uffff\001\002" +
    "\000\014\006\021\007\016\027\015\030\024\032\022\001" +
    "\002\000\004\056\011\001\002\000\004\044\012\001\002" +
    "\000\014\006\ufffd\007\ufffd\027\ufffd\030\ufffd\032\ufffd\001" +
    "\002\000\006\012\ufffc\017\ufffc\001\002\000\012\006\021" +
    "\027\015\030\024\032\022\001\002\000\012\006\uffd2\020" +
    "\225\022\226\027\uffd2\001\002\000\014\006\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\056\210\001\002\000\004\006\021\001" +
    "\002\000\006\006\021\027\015\001\002\000\012\012\uffc2" +
    "\015\100\017\uffc2\056\077\001\002\000\010\006\uffdc\027" +
    "\uffdc\056\064\001\002\000\004\017\060\001\002\000\012" +
    "\006\uffe3\027\uffe3\032\uffe3\056\035\001\002\000\010\006" +
    "\021\027\015\032\022\001\002\000\006\012\ufffa\017\ufffa" +
    "\001\002\000\004\006\021\001\002\000\006\006\021\027" +
    "\015\001\002\000\004\006\021\001\002\000\006\012\ufff4" +
    "\017\ufff4\001\002\000\006\012\uffee\017\uffee\001\002\000" +
    "\006\012\ufff3\017\ufff3\001\002\000\004\054\041\001\002" +
    "\000\012\006\uffe0\027\uffe0\032\uffe0\056\035\001\002\000" +
    "\010\006\uffe2\027\uffe2\032\uffe2\001\002\000\010\006\uffe1" +
    "\027\uffe1\032\uffe1\001\002\000\004\033\042\001\002\000" +
    "\004\037\043\001\002\000\006\055\045\056\046\001\002" +
    "\000\004\045\047\001\002\000\006\040\uffde\045\uffde\001" +
    "\002\000\006\040\uffdd\045\uffdd\001\002\000\006\055\045" +
    "\056\046\001\002\000\004\040\051\001\002\000\004\010" +
    "\052\001\002\000\010\004\056\013\055\056\054\001\002" +
    "\000\004\043\057\001\002\000\006\036\uffd3\043\uffd3\001" +
    "\002\000\006\036\uffd5\043\uffd5\001\002\000\006\036\uffd4" +
    "\043\uffd4\001\002\000\012\006\uffdf\027\uffdf\032\uffdf\056" +
    "\uffdf\001\002\000\004\024\061\001\002\000\004\002\ufffe" +
    "\001\002\000\010\006\uffd9\027\uffd9\056\064\001\002\000" +
    "\006\006\uffdb\027\uffdb\001\002\000\006\042\071\044\uffd6" +
    "\001\002\000\004\044\066\001\002\000\010\004\056\013" +
    "\055\056\054\001\002\000\004\043\070\001\002\000\010" +
    "\006\uffd8\027\uffd8\056\uffd8\001\002\000\004\056\064\001" +
    "\002\000\004\044\uffd7\001\002\000\006\006\uffda\027\uffda" +
    "\001\002\000\012\012\uffbe\015\uffbe\017\uffbe\056\uffbe\001" +
    "\002\000\006\012\uffc1\017\uffc1\001\002\000\012\012\uffbd" +
    "\015\uffbd\017\uffbd\056\uffbd\001\002\000\010\035\176\037" +
    "\122\054\175\001\002\000\004\035\171\001\002\000\004" +
    "\054\104\001\002\000\012\012\uffbf\015\100\017\uffbf\056" +
    "\077\001\002\000\006\012\uffc0\017\uffc0\001\002\000\016" +
    "\005\110\016\106\035\105\053\113\055\114\056\121\001" +
    "\002\000\016\005\110\016\106\035\105\053\113\055\114" +
    "\056\164\001\002\000\012\036\uffa3\042\uffa3\043\uffa3\052" +
    "\uffa3\001\002\000\004\052\165\001\002\000\012\036\uffa4" +
    "\042\uffa4\043\uffa4\052\uffa4\001\002\000\020\036\uffb1\042" +
    "\uffb1\043\uffb1\046\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002" +
    "\000\020\036\uffaf\042\uffaf\043\uffaf\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\001\002\000\016\005\110\016\106\035\105" +
    "\053\113\055\114\056\164\001\002\000\022\036\uffaa\042" +
    "\uffaa\043\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\001\002\000\004\043\161\001\002\000\010\036\uffae\042" +
    "\uffae\043\uffae\001\002\000\012\036\uffb0\042\uffb0\043\uffb0" +
    "\052\uff9f\001\002\000\012\046\143\047\145\050\144\051" +
    "\142\001\002\000\020\035\123\037\122\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uff9e\001\002\000\006\055\045\056" +
    "\136\001\002\000\024\005\110\016\106\035\105\036\uffec" +
    "\042\uffec\053\113\055\114\056\130\057\125\001\002\000" +
    "\006\036\uffb8\042\133\001\002\000\006\036\uffb7\042\uffb7" +
    "\001\002\000\006\036\uffb5\042\uffb5\001\002\000\006\036" +
    "\uffb4\042\uffb4\001\002\000\024\035\123\036\uffb6\037\122" +
    "\042\uffb6\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uff9e\001" +
    "\002\000\004\036\132\001\002\000\010\036\uffba\042\uffba" +
    "\043\uffba\001\002\000\024\005\110\016\106\035\105\036" +
    "\uffec\042\uffec\053\113\055\114\056\130\057\125\001\002" +
    "\000\004\036\uffb9\001\002\000\004\040\141\001\002\000" +
    "\006\037\122\040\uffdd\001\002\000\004\040\140\001\002" +
    "\000\026\036\uff9d\040\uff9d\042\uff9d\043\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\001\002\000\026" +
    "\036\uff9c\040\uff9c\042\uff9c\043\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\054\uff9c\001\002\000\010\035\152" +
    "\055\114\056\147\001\002\000\010\035\152\055\114\056" +
    "\147\001\002\000\010\035\152\055\114\056\147\001\002" +
    "\000\010\035\152\055\114\056\147\001\002\000\022\036" +
    "\uffa2\042\uffa2\043\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\001\002\000\024\036\uffa1\037\122\042\uffa1\043" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\001\002" +
    "\000\022\036\uffa0\042\uffa0\043\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\001\002\000\022\036\uffac\042\uffac" +
    "\043\uffac\046\143\047\uffac\050\uffac\051\uffac\052\uffac\001" +
    "\002\000\010\035\152\055\114\056\147\001\002\000\014" +
    "\036\155\046\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002\000" +
    "\006\046\143\047\145\001\002\000\022\036\uffab\042\uffab" +
    "\043\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\001" +
    "\002\000\016\036\uffa7\042\uffa7\043\uffa7\046\143\047\145" +
    "\052\uffa7\001\002\000\022\036\uffad\042\uffad\043\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\001\002\000\016" +
    "\036\uffa6\042\uffa6\043\uffa6\046\143\047\145\052\uffa6\001" +
    "\002\000\012\012\uffb2\015\uffb2\017\uffb2\056\uffb2\001\002" +
    "\000\012\036\uffa9\042\uffa9\043\uffa9\052\165\001\002\000" +
    "\012\036\uff9f\042\uff9f\043\uff9f\052\uff9f\001\002\000\024" +
    "\036\uff9e\037\122\042\uff9e\043\uff9e\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uff9e\001\002\000\016\005\110\016\106" +
    "\035\105\053\113\055\114\056\164\001\002\000\012\036" +
    "\uffa8\042\uffa8\043\uffa8\052\uffa8\001\002\000\006\036\170" +
    "\052\uff9f\001\002\000\012\036\uffa5\042\uffa5\043\uffa5\052" +
    "\uffa5\001\002\000\024\005\110\016\106\035\105\036\uffec" +
    "\042\uffec\053\113\055\114\056\130\057\125\001\002\000" +
    "\004\036\173\001\002\000\004\043\174\001\002\000\012" +
    "\012\uffbb\015\uffbb\017\uffbb\056\uffbb\001\002\000\016\005" +
    "\110\016\106\035\105\053\113\055\114\056\121\001\002" +
    "\000\024\005\110\016\106\035\105\036\uffec\042\uffec\053" +
    "\113\055\114\056\130\057\125\001\002\000\004\036\200" +
    "\001\002\000\004\043\201\001\002\000\012\012\uffbc\015" +
    "\uffbc\017\uffbc\056\uffbc\001\002\000\004\043\203\001\002" +
    "\000\012\012\uffb3\015\uffb3\017\uffb3\056\uffb3\001\002\000" +
    "\006\012\ufff9\017\ufff9\001\002\000\004\006\021\001\002" +
    "\000\006\012\ufff2\017\ufff2\001\002\000\006\012\ufff8\017" +
    "\ufff8\001\002\000\004\054\214\001\002\000\012\006\uffea" +
    "\027\uffea\030\uffea\032\uffea\001\002\000\014\006\uffe8\027" +
    "\uffe8\030\uffe8\032\uffe8\056\210\001\002\000\012\006\uffe9" +
    "\027\uffe9\030\uffe9\032\uffe9\001\002\000\010\005\216\016" +
    "\217\055\215\001\002\000\004\043\222\001\002\000\004" +
    "\043\uffe5\001\002\000\004\043\uffe4\001\002\000\004\043" +
    "\221\001\002\000\014\006\uffe6\027\uffe6\030\uffe6\032\uffe6" +
    "\056\uffe6\001\002\000\014\006\uffe7\027\uffe7\030\uffe7\032" +
    "\uffe7\056\uffe7\001\002\000\012\006\uffcd\020\uffcd\022\uffcd" +
    "\027\uffcd\001\002\000\014\006\021\007\016\027\015\030" +
    "\024\032\022\001\002\000\004\056\256\001\002\000\004" +
    "\056\243\001\002\000\012\006\uffce\020\uffce\022\uffce\027" +
    "\uffce\001\002\000\014\006\021\007\016\027\015\030\024" +
    "\032\022\001\002\000\012\006\uffd1\020\225\022\226\027" +
    "\uffd1\001\002\000\012\006\uffcf\020\uffcf\022\uffcf\027\uffcf" +
    "\001\002\000\012\006\uffd0\020\uffd0\022\uffd0\027\uffd0\001" +
    "\002\000\004\012\236\001\002\000\004\017\241\001\002" +
    "\000\004\056\237\001\002\000\004\043\240\001\002\000" +
    "\004\017\uffc6\001\002\000\004\043\242\001\002\000\012" +
    "\006\uffc7\020\uffc7\022\uffc7\027\uffc7\001\002\000\004\035" +
    "\244\001\002\000\006\036\uffec\056\064\001\002\000\004" +
    "\036\254\001\002\000\004\044\250\001\002\000\004\036" +
    "\uffc8\001\002\000\010\004\056\013\055\056\054\001\002" +
    "\000\006\036\uffc9\043\252\001\002\000\006\036\uffec\056" +
    "\064\001\002\000\004\036\uffca\001\002\000\004\044\255" +
    "\001\002\000\014\006\uffcb\007\uffcb\027\uffcb\030\uffcb\032" +
    "\uffcb\001\002\000\004\035\257\001\002\000\006\036\uffec" +
    "\056\064\001\002\000\004\036\261\001\002\000\004\044" +
    "\262\001\002\000\006\004\265\013\264\001\002\000\004" +
    "\044\266\001\002\000\004\044\uffc4\001\002\000\004\044" +
    "\uffc3\001\002\000\014\006\uffc5\007\uffc5\027\uffc5\030\uffc5" +
    "\032\uffc5\001\002\000\004\017\270\001\002\000\004\043" +
    "\271\001\002\000\012\006\uffcc\020\uffcc\022\uffcc\027\uffcc" +
    "\001\002\000\010\006\021\027\015\032\022\001\002\000" +
    "\006\012\ufffb\017\ufffb\001\002\000\006\006\021\027\015" +
    "\001\002\000\004\006\021\001\002\000\006\012\ufff6\017" +
    "\ufff6\001\002\000\006\012\ufff5\017\ufff5\001\002\000\004" +
    "\006\021\001\002\000\006\012\uffef\017\uffef\001\002\000" +
    "\004\006\021\001\002\000\006\012\ufff7\017\ufff7\001\002" +
    "\000\006\006\021\027\015\001\002\000\006\012\ufff1\017" +
    "\ufff1\001\002\000\004\006\021\001\002\000\006\012\uffed" +
    "\017\uffed\001\002\000\006\012\ufff0\017\ufff0\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\006\001\001\000\002\001\001" +
    "\000\016\005\022\007\013\012\024\016\017\023\016\034" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\271\016\274\023" +
    "\273\034\272\001\001\000\014\024\230\025\222\026\223" +
    "\030\226\031\227\001\001\000\006\010\210\011\211\001" +
    "\001\000\004\034\206\001\001\000\006\023\204\034\203" +
    "\001\001\000\014\035\073\040\074\041\101\045\075\055" +
    "\100\001\001\000\010\017\062\020\061\022\064\001\001" +
    "\000\002\001\001\000\006\013\036\014\035\001\001\000" +
    "\010\016\027\023\026\034\025\001\001\000\002\001\001" +
    "\000\004\034\033\001\001\000\006\023\030\034\031\001" +
    "\001\000\004\034\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\037\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\072" +
    "\020\061\022\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\035\073\040\102\041\101" +
    "\045\075\055\100\001\001\000\002\001\001\000\020\036" +
    "\115\043\114\050\117\051\106\052\110\053\116\055\111" +
    "\001\001\000\014\050\117\051\106\052\152\053\166\055" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\050" +
    "\117\051\161\052\145\053\162\055\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\134" +
    "\055\136\001\001\000\026\006\126\036\115\037\130\042" +
    "\123\043\125\050\117\051\106\052\110\053\116\055\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\126\036\115\037\133\042" +
    "\123\043\125\050\117\051\106\052\110\053\116\055\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\157\052\145\055\147\001\001\000\010\050" +
    "\156\052\145\055\147\001\001\000\010\050\155\052\145" +
    "\055\147\001\001\000\010\050\150\052\145\055\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\153\052\152\055\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\050\117\051\165\052\145\053\162\055" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\126\036\115\037\171\042\123\043" +
    "\125\050\117\051\106\052\110\053\116\055\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\036\115\043\201\050\117\051\106\052\110\053\116" +
    "\055\111\001\001\000\026\006\126\036\115\037\176\042" +
    "\123\043\125\050\117\051\106\052\110\053\116\055\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\212" +
    "\011\211\001\001\000\002\001\001\000\004\044\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\266\007\013\012\024\016\017" +
    "\023\016\034\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\233\007\013\012\024" +
    "\016\017\023\016\034\012\001\001\000\012\025\231\026" +
    "\223\030\232\031\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\246\022\245\027\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\250\001\001\000" +
    "\002\001\001\000\010\006\246\022\245\027\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\246\022\245\027\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\303\023\301\034\302\001\001" +
    "\000\002\001\001\000\006\023\277\034\276\001\001\000" +
    "\004\034\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\300\001\001\000\002\001\001\000\004\034" +
    "\307\001\001\000\002\001\001\000\006\023\305\034\304" +
    "\001\001\000\002\001\001\000\004\034\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // elementoVector ::= IDENTIFICADOR COR_IZDO constanteNumerica COR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoVector",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // elementoVector ::= IDENTIFICADOR COR_IZDO elementoVector COR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoVector",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opLogico ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opLogico ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opAritmetico ::= elementoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opAritmetico ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opAritmetico ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expLogica ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expLogica ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expLogica ::= PAR_IZDO expLogica PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expLogica ::= opAritmetico EQUIVALENTE opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expLogica ::= opAritmetico MENOR opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expLogica ::= opLogico Y opLogico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expLogica ::= NO opLogico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expAritmetica ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expAritmetica ::= PAR_IZDO expAritmetica PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expAritmetica ::= opAritmetico PRODUCTO opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expAritmetica ::= opAritmetico SUMA opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= elementoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaAsignacion ::= elementoVector ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciaAsignacion ::= IDENTIFICADOR ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // argumento ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumento ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argumento ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argumento ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // argumentoMultiple ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentoMultiple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argumentoMultiple ::= argumento COMA argumentoMultiple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentoMultiple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamadaFuncion ::= IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamadaProcedimiento ::= ESCRIBIR PAR_IZDO argumentoMultiple PAR_DCHO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // llamadaProcedimiento ::= IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloqueSentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloqueSentencias ::= sentencia bloqueSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // seccionPrincipal ::= COMIENZO bloqueSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionPrincipal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // seccionPrincipal ::= COMIENZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionPrincipal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipoPrimitivo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipoPrimitivo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aperturaFuncion ::= FUNCION IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS tipoPrimitivo DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aperturaFuncion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcionDevolver ::= DEVOLVER IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDevolver",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracionFuncion ::= aperturaFuncion seccionesPrograma funcionDevolver FIN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametrosProcedimiento ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametrosProcedimiento ::= nombreVariables DOS_PUNTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametrosProcedimiento ::= nombreVariables DOS_PUNTOS tipo PUNTO_COMA parametrosProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // aperturaProcedimiento ::= PROCEDIMIENTO IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aperturaProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracionProcedimiento ::= aperturaProcedimiento seccionesPrograma FIN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionProcedimiento",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaSubprogramas ::= declaracionProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaSubprogramas ::= declaracionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaSubprogramas ::= listaSubprogramas declaracionProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaSubprogramas ::= listaSubprogramas declaracionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seccionSubprogramas ::= SUBPROGRAMAS listaSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccionSubprogramas ::= SUBPROGRAMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nombreVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombreVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nombreVariables ::= IDENTIFICADOR COMA nombreVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombreVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionVariable ::= nombreVariables DOS_PUNTOS tipo PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaVariables ::= declaracionVariable listaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // seccionVariables ::= VARIABLES listaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seccionVariables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constanteNumerica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteNumerica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constanteNumerica ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteNumerica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionTipo ::= IDENTIFICADOR ASIGNACION VECTOR COR_IZDO constanteNumerica RANGO constanteNumerica COR_DCHO DE tipo PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaTipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaTipos ::= declaracionTipo listaTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaTipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccionTipos ::= TIPOS listaTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionTipos ::= TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorLogico ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valorLogico ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionConstante ::= IDENTIFICADOR ASIGNACION valorLogico PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionConstante ::= IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaConstantes ::= declaracionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaConstantes ::= declaracionConstante listaConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantes ::= CONSTANTES listaConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // seccionConstantes ::= CONSTANTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // seccionesPrograma ::= seccionConstantes seccionTipos seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seccionesPrograma ::= seccionTipos seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // seccionesPrograma ::= seccionConstantes seccionSubprogramas seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionesPrograma ::= seccionConstantes seccionTipos seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionesPrograma ::= seccionConstantes seccionTipos seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionesPrograma ::= seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionesPrograma ::= seccionTipos seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccionesPrograma ::= seccionTipos seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionesPrograma ::= seccionConstantes seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionesPrograma ::= seccionConstantes seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionesPrograma ::= seccionConstantes seccionTipos seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionesPrograma ::= seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionesPrograma ::= seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccionesPrograma ::= seccionTipos seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccionesPrograma ::= seccionConstantes seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccionesPrograma ::= seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // apertura ::= PROGRAMA IDENTIFICADOR DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= apertura seccionesPrograma FIN PUNTO 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

