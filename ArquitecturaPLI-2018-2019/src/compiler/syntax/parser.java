
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 11 14:22:03 CET 2018
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 11 14:22:03 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\060\002\000\002\002" +
    "\004\000\002\003\006\000\002\004\005\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\007\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\006\000\002\011\006\000\002\044" +
    "\003\000\002\044\003\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\015\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\004\000\002\017\004\000\002\017\003\000\002\020" +
    "\006\000\002\022\005\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\023\003\000" +
    "\002\023\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\025\006\000\002\026" +
    "\010\000\002\027\007\000\002\027\010\000\002\027\005" +
    "\000\002\027\006\000\002\027\003\000\002\030\007\000" +
    "\002\033\005\000\002\031\012\000\002\032\003\000\002" +
    "\032\003\000\002\034\003\000\002\034\004\000\002\040" +
    "\005\000\002\040\004\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\035\006\000" +
    "\002\035\006\000\002\036\006\000\002\037\005\000\002" +
    "\037\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\047\005\000\002\047\005" +
    "\000\002\045\011\000\002\045\014\000\002\046\014\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\003\000\002\055\004\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\003\000\002\055\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\003\000\002\053" +
    "\003\000\002\057\006\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\023\000\001\002\000\004\002\345\001" +
    "\002\000\004\023\010\001\002\000\004\002\uffff\001\002" +
    "\000\014\006\021\007\016\027\015\030\024\032\022\001" +
    "\002\000\004\056\011\001\002\000\004\044\012\001\002" +
    "\000\014\006\ufffd\007\ufffd\027\ufffd\030\ufffd\032\ufffd\001" +
    "\002\000\006\012\ufffc\017\ufffc\001\002\000\012\006\021" +
    "\027\015\030\024\032\022\001\002\000\012\006\uffd2\020" +
    "\253\022\254\027\uffd2\001\002\000\014\006\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\056\236\001\002\000\004\006\021\001" +
    "\002\000\006\006\021\027\015\001\002\000\016\012\uffc0" +
    "\015\102\017\uffc0\021\104\025\105\056\106\001\002\000" +
    "\010\006\uffdc\027\uffdc\056\064\001\002\000\004\017\060" +
    "\001\002\000\012\006\uffe3\027\uffe3\032\uffe3\056\035\001" +
    "\002\000\010\006\021\027\015\032\022\001\002\000\006" +
    "\012\ufffa\017\ufffa\001\002\000\004\006\021\001\002\000" +
    "\006\006\021\027\015\001\002\000\004\006\021\001\002" +
    "\000\006\012\ufff4\017\ufff4\001\002\000\006\012\uffee\017" +
    "\uffee\001\002\000\006\012\ufff3\017\ufff3\001\002\000\004" +
    "\054\041\001\002\000\012\006\uffe0\027\uffe0\032\uffe0\056" +
    "\035\001\002\000\010\006\uffe2\027\uffe2\032\uffe2\001\002" +
    "\000\010\006\uffe1\027\uffe1\032\uffe1\001\002\000\004\033" +
    "\042\001\002\000\004\037\043\001\002\000\006\056\046" +
    "\057\045\001\002\000\004\045\047\001\002\000\010\040" +
    "\uffde\044\uffde\045\uffde\001\002\000\010\040\uffdd\044\uffdd" +
    "\045\uffdd\001\002\000\006\056\046\057\045\001\002\000" +
    "\004\040\051\001\002\000\004\010\052\001\002\000\010" +
    "\004\056\013\055\056\054\001\002\000\004\043\057\001" +
    "\002\000\006\036\uffd3\043\uffd3\001\002\000\006\036\uffd5" +
    "\043\uffd5\001\002\000\006\036\uffd4\043\uffd4\001\002\000" +
    "\012\006\uffdf\027\uffdf\032\uffdf\056\uffdf\001\002\000\004" +
    "\024\061\001\002\000\004\002\ufffe\001\002\000\010\006" +
    "\uffd9\027\uffd9\056\064\001\002\000\006\006\uffdb\027\uffdb" +
    "\001\002\000\006\042\071\044\uffd6\001\002\000\004\044" +
    "\066\001\002\000\010\004\056\013\055\056\054\001\002" +
    "\000\004\043\070\001\002\000\010\006\uffd8\027\uffd8\056" +
    "\uffd8\001\002\000\004\056\064\001\002\000\004\044\uffd7" +
    "\001\002\000\006\006\uffda\027\uffda\001\002\000\004\043" +
    "\uffb9\001\002\000\016\012\uffbf\015\102\017\uffbf\021\104" +
    "\025\105\056\106\001\002\000\004\043\uffbc\001\002\000" +
    "\004\043\231\001\002\000\004\054\227\001\002\000\004" +
    "\043\uffbb\001\002\000\004\035\224\001\002\000\004\043" +
    "\uffba\001\002\000\004\056\213\001\002\000\016\005\115" +
    "\016\113\035\112\053\121\056\160\057\123\001\002\000" +
    "\010\035\111\037\107\054\110\001\002\000\006\056\172" +
    "\057\045\001\002\000\016\005\115\016\113\035\112\053" +
    "\121\056\170\057\123\001\002\000\024\005\115\016\113" +
    "\035\112\036\uffec\042\uffec\053\121\056\131\057\123\060" +
    "\122\001\002\000\016\005\115\016\113\035\112\053\121" +
    "\056\160\057\123\001\002\000\014\014\uff9c\036\uff9c\042" +
    "\uff9c\043\uff9c\052\uff9c\001\002\000\004\052\161\001\002" +
    "\000\014\014\uff9d\036\uff9d\042\uff9d\043\uff9d\052\uff9d\001" +
    "\002\000\020\036\uffaa\042\uffaa\043\uffaa\046\uff9b\047\uff9b" +
    "\050\uff9b\051\uff9b\001\002\000\006\036\uffb4\042\163\001" +
    "\002\000\020\036\uffa8\042\uffa8\043\uffa8\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\001\002\000\016\005\115\016\113\035" +
    "\112\053\121\056\160\057\123\001\002\000\006\036\uffb3" +
    "\042\uffb3\001\002\000\024\014\uffa3\036\uffa3\042\uffa3\043" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\001\002" +
    "\000\006\036\uffb1\042\uffb1\001\002\000\010\036\uffa7\042" +
    "\uffa7\043\uffa7\001\002\000\012\036\uffa9\042\uffa9\043\uffa9" +
    "\052\uff98\001\002\000\006\036\uffb0\042\uffb0\001\002\000" +
    "\012\046\137\047\142\050\141\051\140\001\002\000\024" +
    "\035\134\036\uffb2\037\107\042\uffb2\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff97\001\002\000\004\036\133\001\002" +
    "\000\004\043\uffb8\001\002\000\024\005\115\016\113\035" +
    "\112\036\uffec\042\uffec\053\121\056\131\057\123\060\122" +
    "\001\002\000\004\036\136\001\002\000\010\036\uffb6\042" +
    "\uffb6\043\uffb6\001\002\000\010\035\147\056\144\057\123" +
    "\001\002\000\010\035\147\056\144\057\123\001\002\000" +
    "\010\035\147\056\144\057\123\001\002\000\010\035\147" +
    "\056\144\057\123\001\002\000\024\014\uff9b\036\uff9b\042" +
    "\uff9b\043\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\001\002\000\026\014\uff9a\036\uff9a\037\107\042\uff9a\043" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\001\002" +
    "\000\024\014\uff99\036\uff99\042\uff99\043\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\001\002\000\024\014\uffa5" +
    "\036\uffa5\042\uffa5\043\uffa5\046\137\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\001\002\000\010\035\147\056\144\057\123" +
    "\001\002\000\014\036\152\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\001\002\000\006\046\137\047\142\001\002\000\024" +
    "\014\uffa4\036\uffa4\042\uffa4\043\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\001\002\000\020\014\uffa0\036\uffa0" +
    "\042\uffa0\043\uffa0\046\137\047\142\052\uffa0\001\002\000" +
    "\020\014\uff9f\036\uff9f\042\uff9f\043\uff9f\046\137\047\142" +
    "\052\uff9f\001\002\000\024\014\uffa6\036\uffa6\042\uffa6\043" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\001\002" +
    "\000\014\014\uffa2\036\uffa2\042\uffa2\043\uffa2\052\161\001" +
    "\002\000\014\014\uff98\036\uff98\042\uff98\043\uff98\052\uff98" +
    "\001\002\000\026\014\uff97\036\uff97\037\107\042\uff97\043" +
    "\uff97\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff97\001\002" +
    "\000\016\005\115\016\113\035\112\053\121\056\160\057" +
    "\123\001\002\000\014\014\uffa1\036\uffa1\042\uffa1\043\uffa1" +
    "\052\uffa1\001\002\000\024\005\115\016\113\035\112\036" +
    "\uffec\042\uffec\053\121\056\131\057\123\060\122\001\002" +
    "\000\004\036\uffb5\001\002\000\006\036\166\052\uff98\001" +
    "\002\000\014\014\uff9e\036\uff9e\042\uff9e\043\uff9e\052\uff9e" +
    "\001\002\000\004\043\uffaf\001\002\000\020\035\134\037" +
    "\107\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff97\001\002" +
    "\000\004\040\175\001\002\000\006\037\107\040\uffdd\001" +
    "\002\000\004\040\174\001\002\000\030\014\uff96\036\uff96" +
    "\040\uff96\042\uff96\043\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\054\uff96\001\002\000\030\014\uff95\036\uff95" +
    "\040\uff95\042\uff95\043\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\054\uff95\001\002\000\006\014\177\052\uff98" +
    "\001\002\000\004\044\200\001\002\000\012\015\102\021" +
    "\104\025\105\056\106\001\002\000\016\015\102\017\203" +
    "\021\104\025\105\026\204\056\106\001\002\000\004\043" +
    "\212\001\002\000\004\025\211\001\002\000\004\044\205" +
    "\001\002\000\012\015\102\021\104\025\105\056\106\001" +
    "\002\000\014\015\102\017\207\021\104\025\105\056\106" +
    "\001\002\000\004\025\210\001\002\000\004\043\uffac\001" +
    "\002\000\004\043\uffad\001\002\000\020\012\uffbe\015\uffbe" +
    "\017\uffbe\021\uffbe\025\uffbe\026\uffbe\056\uffbe\001\002\000" +
    "\004\011\214\001\002\000\006\056\046\057\045\001\002" +
    "\000\004\045\216\001\002\000\006\056\046\057\045\001" +
    "\002\000\004\044\220\001\002\000\012\015\102\021\104" +
    "\025\105\056\106\001\002\000\014\015\102\017\222\021" +
    "\104\025\105\056\106\001\002\000\004\021\223\001\002" +
    "\000\004\043\uffab\001\002\000\022\005\115\016\113\035" +
    "\112\036\uffec\053\121\056\131\057\123\060\122\001\002" +
    "\000\004\036\226\001\002\000\004\043\uffb7\001\002\000" +
    "\016\005\115\016\113\035\112\053\121\056\170\057\123" +
    "\001\002\000\004\043\uffae\001\002\000\020\012\uffbd\015" +
    "\uffbd\017\uffbd\021\uffbd\025\uffbd\026\uffbd\056\uffbd\001\002" +
    "\000\006\012\ufff9\017\ufff9\001\002\000\004\006\021\001" +
    "\002\000\006\012\ufff2\017\ufff2\001\002\000\006\012\ufff8" +
    "\017\ufff8\001\002\000\004\054\242\001\002\000\012\006" +
    "\uffea\027\uffea\030\uffea\032\uffea\001\002\000\014\006\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\056\236\001\002\000\012\006" +
    "\uffe9\027\uffe9\030\uffe9\032\uffe9\001\002\000\010\005\244" +
    "\016\245\057\243\001\002\000\004\043\250\001\002\000" +
    "\004\043\uffe5\001\002\000\004\043\uffe4\001\002\000\004" +
    "\043\247\001\002\000\014\006\uffe6\027\uffe6\030\uffe6\032" +
    "\uffe6\056\uffe6\001\002\000\014\006\uffe7\027\uffe7\030\uffe7" +
    "\032\uffe7\056\uffe7\001\002\000\012\006\uffcd\020\uffcd\022" +
    "\uffcd\027\uffcd\001\002\000\014\006\021\007\016\027\015" +
    "\030\024\032\022\001\002\000\004\056\312\001\002\000" +
    "\004\056\271\001\002\000\012\006\uffce\020\uffce\022\uffce" +
    "\027\uffce\001\002\000\014\006\021\007\016\027\015\030" +
    "\024\032\022\001\002\000\012\006\uffd1\020\253\022\254" +
    "\027\uffd1\001\002\000\012\006\uffcf\020\uffcf\022\uffcf\027" +
    "\uffcf\001\002\000\012\006\uffd0\020\uffd0\022\uffd0\027\uffd0" +
    "\001\002\000\004\012\264\001\002\000\004\017\267\001" +
    "\002\000\004\056\265\001\002\000\004\043\266\001\002" +
    "\000\004\017\uffc4\001\002\000\004\043\270\001\002\000" +
    "\012\006\uffc5\020\uffc5\022\uffc5\027\uffc5\001\002\000\004" +
    "\035\272\001\002\000\010\031\273\036\uffec\056\064\001" +
    "\002\000\004\056\064\001\002\000\004\036\303\001\002" +
    "\000\004\044\277\001\002\000\004\036\uffc6\001\002\000" +
    "\010\004\056\013\055\056\054\001\002\000\006\036\uffc8" +
    "\043\301\001\002\000\010\031\273\036\uffec\056\064\001" +
    "\002\000\004\036\uffca\001\002\000\004\044\304\001\002" +
    "\000\014\006\uffcb\007\uffcb\027\uffcb\030\uffcb\032\uffcb\001" +
    "\002\000\004\044\306\001\002\000\010\004\056\013\055" +
    "\056\054\001\002\000\006\036\uffc7\043\310\001\002\000" +
    "\010\031\273\036\uffec\056\064\001\002\000\004\036\uffc9" +
    "\001\002\000\004\035\313\001\002\000\010\031\273\036" +
    "\uffec\056\064\001\002\000\004\036\315\001\002\000\004" +
    "\044\316\001\002\000\006\004\320\013\321\001\002\000" +
    "\004\044\322\001\002\000\004\044\uffc1\001\002\000\004" +
    "\044\uffc2\001\002\000\014\006\uffc3\007\uffc3\027\uffc3\030" +
    "\uffc3\032\uffc3\001\002\000\004\017\324\001\002\000\004" +
    "\043\325\001\002\000\012\006\uffcc\020\uffcc\022\uffcc\027" +
    "\uffcc\001\002\000\010\006\021\027\015\032\022\001\002" +
    "\000\006\012\ufffb\017\ufffb\001\002\000\006\006\021\027" +
    "\015\001\002\000\004\006\021\001\002\000\006\012\ufff6" +
    "\017\ufff6\001\002\000\006\012\ufff5\017\ufff5\001\002\000" +
    "\004\006\021\001\002\000\006\012\uffef\017\uffef\001\002" +
    "\000\004\006\021\001\002\000\006\012\ufff7\017\ufff7\001" +
    "\002\000\006\006\021\027\015\001\002\000\006\012\ufff1" +
    "\017\ufff1\001\002\000\004\006\021\001\002\000\006\012" +
    "\uffed\017\uffed\001\002\000\006\012\ufff0\017\ufff0\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\003\060\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\006\001\001\000\002\001\001" +
    "\000\016\005\022\007\013\012\024\016\017\023\016\034" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\325\016\330\023" +
    "\327\034\326\001\001\000\014\024\256\025\250\026\251" +
    "\030\254\031\255\001\001\000\006\010\236\011\237\001" +
    "\001\000\004\034\234\001\001\000\006\023\232\034\231" +
    "\001\001\000\020\035\102\040\074\041\076\045\075\046" +
    "\100\047\073\057\077\001\001\000\010\017\062\020\061" +
    "\022\064\001\001\000\002\001\001\000\006\013\036\014" +
    "\035\001\001\000\010\016\027\023\026\034\025\001\001" +
    "\000\002\001\001\000\004\034\033\001\001\000\006\023" +
    "\030\034\031\001\001\000\004\034\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\037\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\072\020\061\022\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\035\102\041\201\045\075\046\100\047" +
    "\073\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\052\127\053\113" +
    "\054\142\055\175\057\144\001\001\000\002\001\001\000" +
    "\006\015\170\057\172\001\001\000\020\036\124\043\166" +
    "\052\127\053\113\054\115\055\125\057\117\001\001\000" +
    "\026\006\126\036\124\037\131\042\116\043\123\052\127" +
    "\053\113\054\115\055\125\057\117\001\001\000\014\052" +
    "\127\053\113\054\147\055\164\057\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\052\127" +
    "\053\155\054\142\055\156\057\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\006\126\036\124\037\134\042\116\043\123\052\127\053" +
    "\113\054\115\055\125\057\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\052\154\054\142\057\144\001" +
    "\001\000\010\052\153\054\142\057\144\001\001\000\010" +
    "\052\152\054\142\057\144\001\001\000\010\052\145\054" +
    "\142\057\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\150\054" +
    "\147\057\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\052\127\053\161\054\142\055\156\057" +
    "\144\001\001\000\002\001\001\000\026\006\126\036\124" +
    "\037\163\042\116\043\123\052\127\053\113\054\115\055" +
    "\125\057\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\035\102\040\200\041\076\045\075\046\100" +
    "\047\073\057\077\001\001\000\016\035\102\041\201\045" +
    "\075\046\100\047\073\057\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\035\102\040" +
    "\205\041\076\045\075\046\100\047\073\057\077\001\001" +
    "\000\016\035\102\041\201\045\075\046\100\047\073\057" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\214\001\001\000\002\001\001\000\004\015\216\001\001" +
    "\000\002\001\001\000\020\035\102\040\220\041\076\045" +
    "\075\046\100\047\073\057\077\001\001\000\016\035\102" +
    "\041\201\045\075\046\100\047\073\057\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\126\036\124" +
    "\042\224\043\123\052\127\053\113\054\115\055\125\057" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\036\124\043\227\052\127\053\113\054\115\055\125\057" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\240\011\237\001\001\000\002\001\001\000\004\044" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\322\007\013\012\024" +
    "\016\017\023\016\034\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\261\007\013" +
    "\012\024\016\017\023\016\034\012\001\001\000\012\025" +
    "\257\026\251\030\260\031\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\275\022\274\027\273\001\001\000\004\022\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\277\001\001\000\002\001\001\000\010" +
    "\006\275\022\274\027\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\306\001\001\000\002\001\001\000\010\006\275\022" +
    "\274\027\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\275\022\274\027\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\337\023\335\034\336\001\001\000\002\001" +
    "\001\000\006\023\333\034\332\001\001\000\004\034\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\334\001\001\000\002\001\001\000\004\034\343\001\001" +
    "\000\002\001\001\000\006\023\341\034\340\001\001\000" +
    "\002\001\001\000\004\034\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // elementoVector ::= IDENTIFICADOR COR_IZDO constanteNumerica COR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoVector",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // elementoVector ::= IDENTIFICADOR COR_IZDO elementoVector COR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementoVector",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opLogico ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opLogico ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opLogico",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opAritmetico ::= elementoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opAritmetico ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opAritmetico ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opAritmetico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expLogica ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expLogica ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expLogica ::= PAR_IZDO expLogica PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expLogica ::= opAritmetico EQUIVALENTE opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expLogica ::= opAritmetico MENOR opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expLogica ::= opLogico Y opLogico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expLogica ::= NO opLogico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLogica",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expAritmetica ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expAritmetica ::= PAR_IZDO expAritmetica PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expAritmetica ::= opAritmetico PRODUCTO opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expAritmetica ::= opAritmetico SUMA opAritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expAritmetica",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= elementoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expLogica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // controlPara ::= PARA IDENTIFICADOR EN constanteNumerica RANGO constanteNumerica DOS_PUNTOS bloqueSentencias FIN PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("controlPara",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // controlSi ::= SI expLogica ENTONCES DOS_PUNTOS bloqueSentencias SINO DOS_PUNTOS bloqueSentencias FIN SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("controlSi",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // controlSi ::= SI expLogica ENTONCES DOS_PUNTOS bloqueSentencias FIN SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("controlSi",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaAsignacion ::= elementoVector ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaAsignacion ::= IDENTIFICADOR ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // argumento ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // argumento ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumento ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumento ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // argumentoMultiple ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentoMultiple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumentoMultiple ::= argumento COMA argumentoMultiple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentoMultiple",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadaFuncion ::= IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // llamadaProcedimiento ::= ESCRIBIR PAR_IZDO argumento PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamadaProcedimiento ::= IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaProcedimiento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= llamadaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= controlPara 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= controlSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloqueSentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloqueSentencias ::= bloqueSentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // seccionPrincipal ::= COMIENZO bloqueSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionPrincipal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // seccionPrincipal ::= COMIENZO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionPrincipal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipoPrimitivo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipoPrimitivo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoPrimitivo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aperturaFuncion ::= FUNCION IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS tipoPrimitivo DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aperturaFuncion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcionDevolver ::= DEVOLVER IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionDevolver",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracionFuncion ::= aperturaFuncion seccionesPrograma funcionDevolver FIN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametrosProcedimiento ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametrosProcedimiento ::= VAR nombreVariables DOS_PUNTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametrosProcedimiento ::= nombreVariables DOS_PUNTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametrosProcedimiento ::= VAR nombreVariables DOS_PUNTOS tipo PUNTO_COMA parametrosProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametrosProcedimiento ::= nombreVariables DOS_PUNTOS tipo PUNTO_COMA parametrosProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosProcedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // aperturaProcedimiento ::= PROCEDIMIENTO IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aperturaProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracionProcedimiento ::= aperturaProcedimiento seccionesPrograma FIN PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionProcedimiento",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaSubprogramas ::= declaracionProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaSubprogramas ::= declaracionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaSubprogramas ::= listaSubprogramas declaracionProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaSubprogramas ::= listaSubprogramas declaracionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSubprogramas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seccionSubprogramas ::= SUBPROGRAMAS listaSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccionSubprogramas ::= SUBPROGRAMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionSubprogramas",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipo ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nombreVariables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombreVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nombreVariables ::= IDENTIFICADOR COMA nombreVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombreVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionVariable ::= nombreVariables DOS_PUNTOS tipo PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaVariables ::= declaracionVariable listaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // seccionVariables ::= VARIABLES listaVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seccionVariables ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constanteNumerica ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteNumerica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constanteNumerica ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constanteNumerica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionTipo ::= IDENTIFICADOR ASIGNACION VECTOR COR_IZDO constanteNumerica RANGO constanteNumerica COR_DCHO DE tipo PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaTipos ::= declaracionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaTipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaTipos ::= declaracionTipo listaTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaTipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccionTipos ::= TIPOS listaTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccionTipos ::= TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorLogico ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valorLogico ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLogico",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracionConstante ::= IDENTIFICADOR ASIGNACION valorLogico PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracionConstante ::= IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaConstantes ::= declaracionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaConstantes ::= declaracionConstante listaConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaConstantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionConstantes ::= CONSTANTES listaConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // seccionConstantes ::= CONSTANTES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // seccionesPrograma ::= seccionConstantes seccionTipos seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seccionesPrograma ::= seccionTipos seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // seccionesPrograma ::= seccionConstantes seccionSubprogramas seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionesPrograma ::= seccionConstantes seccionTipos seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionesPrograma ::= seccionConstantes seccionTipos seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionesPrograma ::= seccionVariables seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionesPrograma ::= seccionTipos seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccionesPrograma ::= seccionTipos seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionesPrograma ::= seccionConstantes seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionesPrograma ::= seccionConstantes seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionesPrograma ::= seccionConstantes seccionTipos seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionesPrograma ::= seccionSubprogramas seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionesPrograma ::= seccionVariables seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccionesPrograma ::= seccionTipos seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccionesPrograma ::= seccionConstantes seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccionesPrograma ::= seccionPrincipal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionesPrograma",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // apertura ::= PROGRAMA IDENTIFICADOR DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= apertura seccionesPrograma FIN PUNTO 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

