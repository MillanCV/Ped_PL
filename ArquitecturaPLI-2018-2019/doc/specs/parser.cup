package compiler.syntax;

// Declaraci�n de importaciones 
//(No modificar las proporcionadas. Se pueden agregar mas)

import java_cup.runtime.Symbol;
import java.util.*;

import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;

import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

// Declaraci�n del c�digo de usuario

action code {:
	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();

:}	

parser code {:
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}
:}

// Declaraci�n de terminales 


// Palabras reservadas
terminal Token BOOLEANO;
terminal Token CIERTO;
terminal Token COMIENZO;
terminal Token CONSTANTES;
terminal Token DE;
terminal Token EN;
terminal Token DEVOLVER;
terminal Token ENTERO;
terminal Token ENTONCES;
terminal Token ESCRIBIR;
terminal Token FALSO;
terminal Token FIN;
terminal Token FUNCION;
terminal Token PARA;
terminal Token PROCEDIMIENTO;
terminal Token PROGRAMA;
terminal Token PUNTO;
terminal Token SI;
terminal Token SINO;
terminal Token SUBPROGRAMAS;
terminal Token TIPOS;
terminal Token VAR;
terminal Token VARIABLES;
terminal Token VECTOR;


// Delimitadores
terminal Token COMILLA_DOBLE;
terminal Token PAR_IZDO;
terminal Token PAR_DCHO;
terminal Token COR_IZDO;
terminal Token COR_DCHO;
terminal Token COMENTARIO;
terminal Token COMA;
terminal Token PUNTO_COMA;
terminal Token DOS_PUNTOS;
terminal Token RANGO;

// Operadores aritmeticos
terminal Token SUMA;
terminal Token PRODUCTO;

// Operadores relacionales
terminal Token MENOR;
terminal Token EQUIVALENTE;

//Operadores logicos
terminal Token Y;
terminal Token NO;

// Operador asignacion
terminal Token ASIGNACION;

// Patron
terminal Token NUMERO;
terminal Token IDENTIFICADOR;
terminal Token STRING;



// ...


// Declaraci�n de no terminales
// no modificar los propuestos

non terminal  			program;
non terminal Axiom		axiom;

non terminal			apertura;
non terminal			seccionesPrograma;
non terminal 			epsilon;	
non terminal  			seccionConstantes;
non terminal  			listaConstantes;
non terminal  			declaracionConstante;

non terminal 			seccionTipos;
non terminal			listaTipos;
non terminal			declaracionTipo;
non terminal			constanteNumerica;

non terminal  			seccionVariables;
non terminal  			listaVariables;
non terminal  			declaracionVariable;
non terminal			tipo;
non terminal			nombreVariables;

non terminal  			seccionSubprogramas;
non terminal  			listaSubprogramas;
non terminal  			declaracionProcedimiento;
non terminal  			aperturaProcedimiento;
non terminal  			parametrosProcedimiento;
non terminal  			declaracionFuncion;
non terminal  			aperturaFuncion;
non terminal  			tipoPrimitivo;
non terminal  			funcionDevolver;

non terminal  			seccionPrincipal;
non terminal  			llamadaProcedimiento;
non terminal  			llamadaFuncion;
non terminal  			argumentoMultiple;

non terminal  			bloqueSentencias;
non terminal			sentencia;
non terminal			argumento;
non terminal			expresion;
non terminal			valorLogico;

non terminal			controlSi;
non terminal			controlPara;
non terminal			sentenciaAsignacion;
non terminal			operando;
non terminal			operador;
non terminal			opAritmetico;
non terminal			opLogico;
non terminal			expAritmetica;
non terminal			expLogica;

non terminal 			funcion;
non terminal 			elementoVector;
// ...


// Declaraci�n de relaciones de precedencia
precedence right	NO;
precedence left     PRODUCTO;
precedence left		Y;
precedence left     SUMA;
precedence left		MENOR;
precedence left 	EQUIVALENTE;
precedence left     PAR_IZDO, PAR_DCHO;
precedence left     COR_IZDO, COR_DCHO;
precedence nonassoc	SI;

// Declaraci�n de reglas de producci�n


start with program;

program ::= 
  {: 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   :}
  axiom:ax
  {: 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   :};
//axiom ::=	;

// -------------
// PROGRAMA
// ------------------------------------------------------

axiom ::=					apertura seccionesPrograma FIN PUNTO; 
apertura ::= 				PROGRAMA IDENTIFICADOR DOS_PUNTOS;
seccionesPrograma ::= 		seccionPrincipal  
							|  seccionConstantes seccionPrincipal  
							|  seccionTipos seccionPrincipal  
							|  seccionVariables seccionPrincipal 
							|  seccionSubprogramas seccionPrincipal   
							|  seccionConstantes seccionTipos seccionPrincipal 
							|  seccionConstantes seccionVariables seccionPrincipal 
							|  seccionConstantes seccionSubprogramas seccionPrincipal 
							|  seccionTipos seccionVariables seccionPrincipal 
							|  seccionTipos seccionSubprogramas seccionPrincipal 
							|  seccionVariables seccionSubprogramas seccionPrincipal 
							|  seccionConstantes seccionTipos seccionVariables seccionPrincipal 
							|  seccionConstantes seccionTipos seccionSubprogramas seccionPrincipal 
							|  seccionConstantes seccionSubprogramas seccionSubprogramas seccionPrincipal 
							|  seccionTipos seccionVariables seccionSubprogramas seccionPrincipal 
							|  seccionConstantes seccionTipos seccionVariables seccionSubprogramas seccionPrincipal;
epsilon ::= ; 

// -------------
// DECLARACION DE CONSTANTES
// ------------------------------------------------------

seccionConstantes ::= 		CONSTANTES 
							| CONSTANTES listaConstantes;
listaConstantes ::= 		declaracionConstante listaConstantes 
							| declaracionConstante;
declaracionConstante ::= 	IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
							| IDENTIFICADOR ASIGNACION valorLogico PUNTO_COMA;

valorLogico ::= 			CIERTO 
							| FALSO;


// -------------
// DECLARACION DE TIPOS
// ------------------------------------------------------

seccionTipos ::=			TIPOS 
							| TIPOS listaTipos;
listaTipos ::=				declaracionTipo listaTipos 
							| declaracionTipo;
declaracionTipo ::=			IDENTIFICADOR ASIGNACION VECTOR COR_IZDO constanteNumerica RANGO constanteNumerica COR_DCHO DE tipo PUNTO_COMA;
constanteNumerica ::=		NUMERO 
							| IDENTIFICADOR;


// -------------
// DECLARACION DE VARIABLES
// ------------------------------------------------------

seccionVariables ::= 		VARIABLES 
							| VARIABLES listaVariables;
listaVariables ::=			declaracionVariable listaVariables 
							| declaracionVariable;
declaracionVariable ::= 	nombreVariables DOS_PUNTOS tipo PUNTO_COMA;
nombreVariables ::= 		IDENTIFICADOR COMA nombreVariables | IDENTIFICADOR;
tipo ::= 					ENTERO 
							| BOOLEANO 
							| IDENTIFICADOR;
							
							
// -------------
// SECCION SUBPROGRAMAS
// ------------------------------------------------------

seccionSubprogramas ::= 	SUBPROGRAMAS 
							| SUBPROGRAMAS listaSubprogramas ;
listaSubprogramas ::= 		listaSubprogramas declaracionFuncion
							| listaSubprogramas declaracionProcedimiento
							| declaracionFuncion
							| declaracionProcedimiento;
							
							
// -------------
// SECCION PROCEDIMIENTO
// ------------------------------------------------------						

declaracionProcedimiento ::= aperturaProcedimiento seccionesPrograma FIN PUNTO_COMA ;
aperturaProcedimiento ::= 	PROCEDIMIENTO IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS;						
parametrosProcedimiento ::=	nombreVariables DOS_PUNTOS tipo PUNTO_COMA parametrosProcedimiento
							| VAR nombreVariables DOS_PUNTOS tipo PUNTO_COMA parametrosProcedimiento
							| nombreVariables DOS_PUNTOS tipo
							| VAR nombreVariables DOS_PUNTOS tipo
							| epsilon;


// -------------
// SECCION FUNCION
// ------------------------------------------------------						

declaracionFuncion ::= 	aperturaFuncion seccionesPrograma funcionDevolver FIN PUNTO_COMA ;
funcionDevolver ::=		DEVOLVER IDENTIFICADOR PUNTO_COMA ;
aperturaFuncion ::= 	FUNCION IDENTIFICADOR PAR_IZDO parametrosProcedimiento PAR_DCHO DOS_PUNTOS tipoPrimitivo DOS_PUNTOS;						
tipoPrimitivo ::=		ENTERO 
						| BOOLEANO;


// -------------
// MAIN
// ------------------------------------------------------

seccionPrincipal ::= 		COMIENZO    
							| COMIENZO bloqueSentencias ;
bloqueSentencias ::= 		bloqueSentencias sentencia PUNTO_COMA  
							|  sentencia PUNTO_COMA;
sentencia ::= 				controlSi
							| controlPara
							| llamadaProcedimiento  
							| sentenciaAsignacion;
							
							
							
llamadaProcedimiento ::= 	IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO 
							| ESCRIBIR PAR_IZDO argumento PAR_DCHO ;
llamadaFuncion ::= 			IDENTIFICADOR PAR_IZDO argumentoMultiple PAR_DCHO;
argumentoMultiple ::=		argumento COMA argumentoMultiple | argumento;
argumento ::= 				STRING 
							| IDENTIFICADOR 
							| expresion 
							| epsilon;




sentenciaAsignacion ::= 	IDENTIFICADOR ASIGNACION expresion 
							| elementoVector ASIGNACION expresion ;

					
// -------------
// SECUENCIA DE CONTROL SI ENTONCES SINO
// ------------------------------------------------------					

controlSi ::= 				SI expLogica ENTONCES DOS_PUNTOS bloqueSentencias FIN SI 
							| SI expLogica ENTONCES DOS_PUNTOS bloqueSentencias SINO DOS_PUNTOS bloqueSentencias FIN SI;
		
		
// -------------
// SECUENCIA DE CONTROL PARA
// ------------------------------------------------------	

controlPara ::= 			PARA IDENTIFICADOR EN constanteNumerica RANGO constanteNumerica DOS_PUNTOS bloqueSentencias FIN PARA ;

				
// -------------
// EXPRESIONES
// ------------------------------------------------------

expresion ::=				expAritmetica 
							| expLogica 
							| elementoVector
							| llamadaFuncion; 
expAritmetica ::=			opAritmetico SUMA opAritmetico 
							| opAritmetico PRODUCTO opAritmetico 
							| PAR_IZDO expAritmetica PAR_DCHO 
							| NUMERO ;
expLogica ::=				NO opLogico
							| opLogico Y opLogico 
							| opAritmetico MENOR opAritmetico 
							| opAritmetico EQUIVALENTE opAritmetico 
							| PAR_IZDO expLogica PAR_DCHO 
							| CIERTO 
							| FALSO;
							
opAritmetico ::= 			expAritmetica
							| IDENTIFICADOR
							| elementoVector;
opLogico ::=				expLogica
							| IDENTIFICADOR;
elementoVector ::=			IDENTIFICADOR COR_IZDO elementoVector COR_DCHO
							|IDENTIFICADOR COR_IZDO constanteNumerica COR_DCHO;