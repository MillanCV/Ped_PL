{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 package compiler.syntax;\
\
// \ul Declaraci\ulnone ?n \ul de\ulnone  \ul importaciones\ulnone  \
//(No \ul modificar\ulnone  \ul las\ulnone  \ul proporcionadas\ulnone . \ul Se\ulnone  \ul pueden\ulnone  \ul agregar\ulnone  \ul mas\ulnone )\
\
import java_cup.runtime.Symbol;\
import java.util.*;\
\
import es.uned.lsi.compiler.lexical.*;\
import es.uned.lsi.compiler.code.*;\
import es.uned.lsi.compiler.intermediate.*;\
import es.uned.lsi.compiler.semantic.*;\
import es.uned.lsi.compiler.semantic.symbol.*;\
import es.uned.lsi.compiler.semantic.type.*;\
import es.uned.lsi.compiler.syntax.*;\
\
import compiler.CompilerContext;\
import compiler.lexical.*;\
import compiler.syntax.nonTerminal.*;\
import compiler.semantic.*;\
import compiler.semantic.symbol.*;\
import compiler.semantic.type.*;\
import compiler.intermediate.*;\
import compiler.code.*;\
\
// \ul Declaraci\ulnone ?n \ul del\ulnone  c?\ul digo\ulnone  \ul de\ulnone  \ul usuario\ulnone \
\
action code \{:\
	\
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();\
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();\
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();\
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();\
\
:\}	\
\
parser code \{:\
	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();\
	\
	public void syntax_error(Symbol symbol)\
	\{ \
	    Token token = (Token) symbol.value;\
	    syntaxErrorManager.syntaxError ("Error \ul sintactico\ulnone ", token);	    \
	\}\
		\
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)\
	\{	\
	    Token token = (Token) symbol.value;\
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);\
	\}\
:\}\
\
// \ul Declaraci\ulnone ?n \ul de\ulnone  \ul terminales\ulnone  (\ul Ejemplo\ulnone )\
\
terminal Token RANGO;\
terminal Token DE;\
terminal Token ENTONCES;\
terminal Token NO;\
terminal Token DEVOLVER;\
terminal Token COMILLA_DOBLE;\
terminal Token PROGRAMA;\
terminal Token ENTERO;\
terminal Token FIN;\
terminal Token PROCEDIMIENTO;\
terminal Token PARA;\
terminal Token BOOLEANO;\
terminal Token SI;\
terminal Token VECTOR;\
terminal Token FUNCION;\
terminal Token COR_IZDO;\
terminal Token COR_DCHO;\
terminal Token EQUIVALENTE;\
terminal Token SINO;\
terminal Token VARIABLES;\
terminal Token FALSO;\
terminal Token VAR;\
terminal Token PAR_IZDO;\
terminal Token CIERTO;\
terminal Token EN;\
terminal Token PAR_DCHO;\
terminal Token PRODUCTO;\
terminal Token SUBPROGRAMAS;\
terminal Token TIPOS;\
terminal Token SUMA;\
terminal Token COMA;\
terminal Token CONSTANTES;\
terminal Token ESCRIBIR;\
terminal Token COMIENZO;\
terminal Token Y;\
terminal Token DOS_PUNTOS;\
terminal Token PUNTO_COMA;\
terminal Token MENOR;\
terminal Token ASIGNACION;\
terminal Token PUNTO;\
\
terminal Token NUMERO;\
terminal Token IDENTIFICADOR;\
terminal Token STRING;\
terminal Token COMENTARIO;\
terminal Token FINAL;\
\
// ...\
\
\
// \ul Declaraci\ulnone ?n \ul de\ulnone  no \ul terminales\ulnone \
// no \ul modificar\ulnone  \ul los\ulnone  \ul propuestos\ulnone \
\
non terminal  			program;\
non terminal Axiom		axiom;\
// ...\
\
\
// \ul Declaraci\ulnone ?n \ul de\ulnone  \ul relaciones\ulnone  \ul de\ulnone  \ul precedencia\ulnone \
////precedence left     PLUS,\
////                    MINUS;\
// ...\
\
// \ul Declaraci\ulnone ?n \ul de\ulnone  \ul reglas\ulnone  \ul de\ulnone  \ul producci\ulnone ?n\
\
\
start with program;\
\
program ::= \
  \{: \
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); \
   :\}\
  axiom:ax\
  \{: \
  		// No \ul modificar\ulnone  \ul esta\ulnone  \ul estructura\ulnone , \ul aunque\ulnone  \ul se\ulnone  \ul pueden\ulnone  a?\ul adir\ulnone  m?s \ul acciones\ulnone  \ul sem\ulnone ?\ul nticas\ulnone \
  		// \ul Para\ulnone  \ul la\ulnone  \ul entrega\ulnone  \ul de\ulnone  \ul febrero\ulnone  \ul pueden\ulnone  \ul comentarse\ulnone  \ul las\ulnone  \ul dos\ulnone  \ul sentencias\ulnone  \ul siguientes\ulnone :\
  		//List intermediateCode = ax.getIntermediateCode ();\
  		//finalCodeFactory.create (intermediateCode);\
  		// \ul En\ulnone  \ul caso\ulnone  \ul de\ulnone  no \ul comentarse\ulnone  \ul las\ulnone  \ul sentencias\ulnone  \ul anteriores\ulnone  \ul puede\ulnone  \ul generar\ulnone  \ul una\ulnone  \ul excepcion\ulnone \
  		// \ul en\ulnone  \ul las\ulnone  \ul llamadas\ulnone  a cupTest \ul en\ulnone  \ul la\ulnone  \ul entrega\ulnone  \ul de\ulnone  \ul Febrero\ulnone . \ul Esto\ulnone  \ul es\ulnone  \ul debido\ulnone  a \ul que\ulnone  \
  		// a?n no \ul se\ulnone  \ul tendr\ulnone ? \ul implementada\ulnone  \ul la\ulnone  \ul generaci\ulnone ?n \ul de\ulnone  c?\ul digo\ulnone  \ul intermedio\ulnone  \ul ni\ulnone  final.\
  		// \ul Para\ulnone  \ul la\ulnone  \ul entrega\ulnone  \ul de\ulnone  \ul Junio\ulnone  \ul deber\ulnone ?n \ul descomentarse\ulnone  y \ul usarse\ulnone .\
  		\
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");\
   :\};\
\
\
axiom ::= ;\
}